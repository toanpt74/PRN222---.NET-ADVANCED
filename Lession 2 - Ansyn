 public static async Task<int> m1()
 {
     int count = 0;
     await Task.Run(() =>
     {
         for(int i=1; i<=10; i++)
         {
             Console.WriteLine("Method 1");
             count++;
         }
     });
     return count;
 }
 public static void m2()
 {
     for(int i=1; i<=5; i++)
     {
         Console.WriteLine("Method 2");
     }
 }
 public static void m3(int count)
 {
     Console.WriteLine("Method 3 is called");
     Console.WriteLine($"Total count is: {count}");
 }
 public static async Task callMethod()
 {
     m2();
     var count = await m1();
     m3(count);
 }
 
 ================================================
Chương trình minh họa tạo ra phương thức getData dạng Ansyn, trong phương thức này sử dụng delay để tạm dừng chương trình trong 3ms
Hàm main gọi phương thức getData(), sử dụng await, do vậy luồng chính sẽ phải đợi cho đến khi kết thúc phương thức này.

 using System.Net;
using System;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Collections;
using System.Linq;
using System.Diagnostics;
using System.Collections.Concurrent;
class Program
{

   
    static async Task<String> getData()
    {
        await Task.Delay(3000);
        return "Data download completed.";
    }
    static void printNumber()
    {
        for (int i = 1; i <= 10; i++)
            Console.Write(i + ", ");
    }
    public static async Task Main()
    {
        Console.WriteLine("Start download data");
        string data = await getData();

        Thread t1 = new Thread(printNumber);
        t1.Start();        
        Console.WriteLine($"Data Received: {data}");
     

    }
}

---------------------------------
Chương trình minh họa xử lý dữ liệu theo Ansyn, trong khi thực hiện getdata thì luồng chính vẫn hoạt động.

using System.Net;
using System;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Collections;
using System.Linq;
using System.Diagnostics;
using System.Collections.Concurrent;
class Program
{

   
    static async Task<String> getData()
    {
        await Task.Delay(3000);
        return "Data download completed.";
    }
    static void printNumber()
    {
        for (int i = 1; i <= 10; i++)
            Console.Write(i + ", ");
    }
    public static async Task Main()
    {
        Console.WriteLine("Start download data");
        Task<String> fetchData = getData();
        
        for(int i=1; i<=5; i++)
        {
            Console.WriteLine("Luong chinh dang xu ly du lieu: " + i + ", ");
            await Task.Delay(100);
        }
        
        string data = await fetchData;

        Console.WriteLine($"Data Received: {data}");
        Console.ReadKey();

    }
}

===========================================
Xây dựng chương trình quản lý công việc bất đồng bộ

1) Tạo lớp UserTask

public class UserTask
{
    public string Name {  get; set; }
    public int Duration { get; set; }
    public UserTask() { }
    public UserTask(string name, int duration)
    {
        this.Name = name;
        this.Duration = duration;
    }
    public async Task ExecuteAnsyn()
    {
        Console.WriteLine($"Start: {Name}");
        await Task.Delay( Duration );
        Console.WriteLine($"Task completed: {Name}");
    }
}

2) Tao lớp TaskManager
 public class TaskManager
 {
     List<UserTask> tasks = new List<UserTask>();
     public TaskManager() { }
     public void AddTask(string name, int d)
     {
         UserTask task = new UserTask(name, d);
         tasks.Add(task);
         Console.WriteLine($"Task {name} have beed added");
     }

     public async Task ExecuteAllTaskAnsyn()
     {
         List<Task> taskList = new List<Task>();
         foreach (var task in tasks)
         {
             taskList.Add(task.ExecuteAnsyn());
         }
         await Task.WhenAll(taskList);
         Console.WriteLine("All task completed.");
     }

 }
 3) Hàm main
  public static async Task Main()
 {
     var w = Stopwatch.StartNew();

     TaskManager manager = new TaskManager();
     manager.AddTask("Tim kiem thong tin", 3000);
     manager.AddTask("Phan tich bao cao",5000);
     manager.AddTask("Lu du lieu vao he thong", 2000);
     await manager.ExecuteAllTaskAnsyn();
     w.Stop();
     Console.WriteLine($"Total time: {w.ElapsedMilliseconds} ms");
     
 }
